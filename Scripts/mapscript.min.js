function mapLoad() { if (browserGrade() == "B") { $(".fullmap").height($(window).height() - 70) } $("#LegendButton").hide("slide", { direction: "right" }, 100); esri.config.defaults.io.corsDetection = false; var a; if (isPhone()) { a = new esri.dijit.PopupMobile(null, dojo.create("div")) } else { a = new esri.dijit.Popup(null, dojo.create("div")) } map = new esri.Map("map", { logo: false, infoWindow: a }); registerLoading(); esri.dijit.BasemapGallery.prototype._markSelected = function (a) { if (a) { dojo.forEach(dojo.query(".esriBasemapGallerySelectedNode", this.domNode), function (a) { dojo.removeClass(a, "esriBasemapGallerySelectedNode") }); var b = dojo.byId("galleryNode_" + a.id); if (b) { dojo.addClass(b, "esriBasemapGallerySelectedNode") } } }; utilities.storage = Storage("map"); createBasemapGallery(); pageSetup(); if (isPhone()) { window.scrollTo(0, 1) } checkUrlParams(); compatCheck() } function registerLoading() { dojo.connect(map, "onUpdateStart", function () { $(".loadAlert").show() }); dojo.connect(map, "onUpdateEnd", function () { $(".loadAlert").hide() }) } function pageSetup() { $("#LegendDialog").dialog({ autoOpen: false, resizable: false, show: { effect: "drop", direction: "up" }, hide: "fade", position: isPhone() ? [0, 0] : [10, 85], zIndex: 1050, width: isPhone() ? $(window).width() - 7 : "auto", height: isPhone() ? $(window).height() - 7 : "auto" }); $("#LegendButton").click(function () { $("#LegendDialog").dialog("open"); _gaq.push(["_trackEvent", "Menu", "Open", "Legend"]); return false }); $("#RegionsDialog").dialog({ autoOpen: false, resizable: false, show: { effect: "drop", direction: "up" }, hide: "fade", position: isPhone() ? [0, 0] : [10, 85], zIndex: 1050, width: isPhone() ? $(window).width() - 7 : "auto", height: isPhone() ? $(window).height() - 7 : "auto" }); $("#RegionsButton").click(function () { showRegionsDialog(); _gaq.push(["_trackEvent", "Menu", "Open", "Regions"]); return false }); $("#HelpDialog").dialog({ autoOpen: false, resizable: false, show: { effect: "drop", direction: "up" }, hide: "fade", position: isPhone() ? [0, 0] : [10, 85], zIndex: 1050, width: isPhone() ? $(window).width() - 7 : "auto", height: isPhone() ? $(window).height() - 7 : "auto" }); $("#HelpButton").click(function () { $("#HelpDialog").dialog("open"); _gaq.push(["_trackEvent", "Menu", "Open", "Regions"]); return false }); $("#TopicsDialog").dialog({ autoOpen: false, resizable: false, show: { effect: "drop", direction: "up" }, hide: "fade", modal: true, width: isTabletOrLess() ? isPhone() ? $(window).width() - 7 : $(window).width() * .95 : 972, height: isPhone() ? $(window).height() - 7 : $(window).height() * .9 }); $("#TopicsButton").click(function () { showBrowser(); _gaq.push(["_trackEvent", "Menu", "Open", "Map Browser"]); return false }); $("#SearchDialog").dialog({ autoOpen: false, resizable: false, show: { effect: "drop", direction: "up" }, hide: "fade", position: isPhone() ? [0, 0] : [10, 85], zIndex: 1050, width: isPhone() ? $(window).width() - 7 : "auto", height: isPhone() ? $(window).height() - 7 : "auto" }); $("#SearchButton").click(function () { $("#SearchDialog").dialog("open"); _gaq.push(["_trackEvent", "Menu", "Open", "Search"]); return false }); $("#AddressSearchButton").click(function () { mapSearch($("#AddressSearchText").val()); _gaq.push(["_trackEvent", "Search", "RawSearch", $("#AddressSearchText").val()]); return false }); $("#SearchMoreButton").click(function () { searchToggle() }); $("#SearchMore").hide() } function showBrowser() { if (config.topicsLoaded) { $("#TopicsDialog").dialog("open") } else { initMapTopics() } } function showRegionsDialog() { if (config.regionsLoaded) { $("#RegionsDialog").dialog("open") } else { initMapRegions() } } function resizeElements() { if (browserGrade() == "B") { $(".fullmap").height($(window).height() - 70) } if (navigator.userAgent.match(/(iPod|iPhone|iPad)/)) { $(".fullmap").height($(window).height() - 70) } map.resize(); $("#TopicsDialog").dialog({ autoOpen: false, width: isTabletOrLess() ? isPhone() ? $(window).width() - 7 : $(window).width() * .95 : 972, height: isPhone() ? $(window).height() - 7 : $(window).height() * .9 }); $("#LegendDialog").dialog({ autoOpen: false, width: isPhone() ? $(window).width() - 7 : "auto", height: isPhone() ? $(window).height() - 7 : "auto" }); $("#HelpDialog").dialog({ autoOpen: false, width: isPhone() ? $(window).width() - 7 : "auto", height: isPhone() ? $(window).height() - 7 : "auto" }); $("#SearchDialog").dialog({ autoOpen: false, width: isPhone() ? $(window).width() - 7 : "auto", height: isPhone() ? $(window).height() - 7 : "auto" }); $("#RegionsDialog").dialog({ autoOpen: false, width: isPhone() ? $(window).width() - 7 : "auto", height: isPhone() ? $(window).height() - 7 : "auto" }) } function checkUrlParams() { if (decodeURIComponent(getUrlVar("dept")) > "") { config.deptFilter = decodeURIComponent(getUrlVar("dept")) } if (decodeURIComponent(getUrlVar("address")) > "") { searchAddress(decodeURIComponent(getUrlVar("address"))); $("#SearchDialog").dialog("open") } if (decodeURIComponent(getUrlVar("id")) > "") { loadWebMap(decodeURIComponent(getUrlVar("id"))) } if (utilities.storage.get("hideWelcome") != "true") { welcomeGuiders() } else { showBrowser() } } function pageSetupTouch() { } function welcomeGuiders() { guiders.createGuider({ buttons: [{ name: "Take a Tour", onclick: guiders.next }, { name: "No Thanks", onclick: function () { showBrowser(); guiders.hideAll() } }], description: '<div style="height:200px;" class="thumbnail"><img src="/Map/Content/Images/Welcome' + Math.floor(Math.random() * 4) + '.jpg" alt="City Hall"></div>' + "<p>This application allows the user to view maps with data from many City departments.  Start with the Map Browser to view the available maps.  If this is your first time visiting, we recommend you take a tour of the site." + '<br/><input class="pull-left" type="checkbox" id="ShowWelcome"/><label for="ShowWelcome">  Please do not show me this again.</label>', id: "welcome", classString: "span4", next: "tourFirst", onHide: checkHide, offset: { left: 0, top: -30 }, overlay: true, width: 300, title: "  Welcome to Phila.gov/Map" }).show(); guiders.createGuider({ attachTo: "#TopicsButton", buttons: [{ name: "End Tour", onclick: guiders.hideAll }, { name: "Next"}], description: "Use the <u>Map Browser</u> to view the available maps.", id: "tourFirst", next: "tourSecond", offset: { left: 25, top: -8 }, position: 5, title: "  Open a Map", width: 200 }); guiders.createGuider({ attachTo: "#SearchButton", buttons: [{ name: "End Tour", onclick: guiders.hideAll }, { name: "Next"}], description: "<u>Search</u> for an address or boundaries such as zip codes and council districts.", id: "tourSecond", next: "tourThird", offset: { left: -10, top: -25 }, position: 2, title: "  Looking for something?", width: 175 }); guiders.createGuider({ attachTo: "#RegionsButton", buttons: [{ name: "End Tour", onclick: guiders.hideAll }, { name: "Next"}], description: "Display <u>Regions</u> on the map such as sanitation areas or police districts.", id: "tourThird", next: "tourFourth", offset: { left: -20, top: -5 }, position: 7, title: "  Service Regions", width: 200 }); guiders.createGuider({ attachTo: "#HelpButton", buttons: [{ name: "End Tour", onclick: guiders.hideAll}], description: "Use <u>Help</u> to find more information about what you can do with the site.", id: "tourFourth", offset: { left: 10, top: -25 }, position: 10, title: "  Lost or Confused?", width: 200, onHide: showBrowser }) } function mapGuiders() { $("#HelpDialog").dialog("close"); guiders.createGuider({ attachTo: ".esriSimpleSliderIncrementButton", buttons: [{ name: "Next" }, { name: "End Help", onclick: guiders.hideAll}], description: "<u>To Zoom In:</u><br/><ul><li>Click this button <i class='icon-plus'></i></li><li>Double Click the map<i class='icon-hand-up'></i></li><li>Scrollwheel Up <i class='icon-sort'></i></li><li>Spread on a touchscreen <i class='icon-resize-full'></i></li></ul>", id: "mapFirst", next: "mapSecond", offset: { left: 0, top: -25 }, position: 2, title: "  Zoom In", width: 250 }).show(); guiders.createGuider({ attachTo: ".esriSimpleSliderDecrementButton", buttons: [{ name: "Next" }, { name: "End Help", onclick: guiders.hideAll}], description: "<u>To Zoom Out:</u><br/><ul><li>Click this button <i class='icon-minus'></i></li><li>Scrollwheel Down <i class='icon-sort'></i></li><li>Pinch on a touchscreen <i class='icon-resize-small'></i></li></ul>", id: "mapSecond", next: "mapThird", offset: { left: 0, top: -25 }, position: 2, title: "  Zoom Out", width: 250 }); guiders.createGuider({ attachTo: "#BaseMapSwitcher", buttons: [{ name: "Next" }, { name: "End Help", onclick: guiders.hideAll}], description: "This Map Toggle will allow you to select a different base map.", id: "mapThird", next: "mapFourth", offset: { left: 0, top: 0 }, position: 9, title: "  Select Base Maps", width: 250 }); guiders.createGuider({ attachTo: "#Map", buttons: [{ name: "End Help", onclick: guiders.hideAll}], description: "Click and drag the map to move around.", id: "mapFourth", offset: { left: 50, top: 50 }, position: 9, title: "  Move the Map", width: 250 }) } function searchGuiders() { $("#HelpDialog").dialog("close"); $("#SearchDialog").dialog("open"); setTimeout(function () { guiders.createGuider({ attachTo: "#AddressSearchText", buttons: [{ name: "Next" }, { name: "End Help", onclick: guiders.hideAll}], description: "Start by typing a Philadelphia street address or use <i>1400 Arch St</i>.", id: "searchFirst", next: "searchSecond", position: 6, title: "  Enter an Address", width: 250 }).show() }, 500); guiders.createGuider({ attachTo: "#AddressSearchButton", buttons: [{ name: "End Help", onclick: guiders.hideAll}], description: "Click the search button or press Enter.", id: "searchSecond", next: "searchThird", position: 5, offset: { left: 25, top: 0 }, title: "  Click to Search", width: 250, onShow: function () { if ($("#AddressSearchText").val().length < 1) { $("#AddressSearchText").val("1400 Arch St.") } $("#AddressSearchButton").on("click.guiders", function () { guiders.next() }) }, onHide: function () { $("#AddressSearchButton").off("click.guiders") } }); guiders.createGuider({ attachTo: "#SearchMoreButton", buttons: [{ name: "End Help", onclick: guiders.hideAll}], description: "Now that you've search for an address, let's search for a council district.  Click here to see what else you can look for.", id: "searchThird", next: "searchFourth", position: 7, offset: { left: 0, top: 0 }, title: "  Click to Expand", width: 250, onShow: function () { if ($("#SearchMore").is(":hidden")) { $("#SearchMoreButton").on("click.guiders", function () { guiders.next() }) } else { guiders.next() } }, onHide: function () { $("#AddressSearchButton").off("click.guiders") } }); guiders.createGuider({ attachTo: '[rel-shortcut="cd:"]', buttons: [{ name: "End Help", onclick: guiders.hideAll}], description: "Click here to select that you want to search for council districts.", id: "searchFourth", next: "searchFifth", position: 6, offset: { left: 0, top: -5 }, title: "  Click to Select", width: 250, onShow: function () { $('[rel-shortcut="cd:"]').on("click.guiders", function () { guiders.next() }) }, onHide: function () { $('[rel-shortcut="cd:"]').off("click.guiders") } }); guiders.createGuider({ attachTo: "#AddressSearchText", buttons: [{ name: "Next" }, { name: "End Help", onclick: guiders.hideAll}], description: "Type in a Council District number If you don't know one, you can use any number <i>1-10</i>.", id: "searchFifth", next: "searchSixth", position: 6, title: "  Enter a District", width: 250, onHide: function () { if ($("#AddressSearchText").val().length < 1 || $("#AddressSearchText").val().length > 2) { $("#AddressSearchText").val("2") } } }); guiders.createGuider({ attachTo: "#AddressSearchText", buttons: [{ name: "Next" }, { name: "End Help", onclick: guiders.hideAll}], description: "Type in a Council District number If you don't know one, you can use any number <i>1-10</i>.", id: "searchFifth", next: "searchSixth", position: 6, title: "  Enter a District", width: 250 }); guiders.createGuider({ attachTo: "#AddressSearchButton", buttons: [{ name: "End Help", onclick: guiders.hideAll}], description: "Click this button, or hit the Enter key on your keyboard.", id: "searchSixth", position: 5, offset: { left: 25, top: 0 }, title: "  Click to Search", width: 250, onShow: function () { if ($("#AddressSearchText").val().length < 1 || $("#AddressSearchText").val().length > 2) { $("#AddressSearchText").val("2") } $("#AddressSearchButton").on("click.guiders", function () { guiders.hideAll() }) }, onHide: function () { $("#AddressSearchButton").off("click.guiders") } }) } function browserGuiders() { $("#HelpDialog").dialog("close"); showBrowser(); setTimeout(function () { guiders.createGuider({ buttons: [{ name: "Next" }, { name: "End Help", onclick: guiders.hideAll}], description: "The Map Browser allows you to find and view available maps. " + "Maps are categorized by the same topics used throughout Phila.gov. " + "This tour will guide you through the use of the Map Browser.", id: "browserFirst", next: "browserSecond", title: "  Welcome to the Map Browser", width: 350 }).show() }, 1e3); guiders.createGuider({ attachTo: "#MapsList", buttons: [{ name: "Next" }, { name: "End Help", onclick: guiders.hideAll}], description: "This list shows the available maps to view in the application.", id: "browserSecond", next: "browserThird", position: 9, title: "  Map List", width: 250 }); guiders.createGuider({ attachTo: "#TopicsList", buttons: [{ name: "Next" }, { name: "End Help", onclick: guiders.hideAll}], description: "Select a topic to filter the available maps.", id: "browserThird", next: "browserFourth", position: 3, title: "  Filter by Topic", width: 250 }); guiders.createGuider({ attachTo: "#MapsList :first.btn-primary", buttons: [{ name: "End Help", onclick: guiders.hideAll}], description: "Select View Map to view the map in the application.  Select View Details to read more about the map and view it in <a title='What is ArcGIS Online?' target='_blank' href='http://help.arcgis.com/en/arcgisonline/help/#/What_is_ArcGIS_Online/010q00000074000000/'>ArcGIS Online</a>.", id: "browserFourth", position: 9, title: "  View Map", width: 250 }) } function regionGuiders() { $("#HelpDialog").dialog("close"); showRegionsDialog(); setTimeout(function () { guiders.createGuider({ attachTo: "#RegionsDialog", buttons: [{ name: "End Help", onclick: guiders.hideAll}], description: "Clcik an item from the list to display it on the map. Click it again to turn it off.  Only one item can be selected at a time.", id: "regionFirst", next: "regionSecond", position: 3, title: "  Display Regions/Service Areas", width: 250 }).show() }, 1e3) } function checkHide() { if ($("#ShowWelcome").is(":checked")) { utilities.storage.set("hideWelcome", true) } } function mapSearch(a) { map.graphics.clear(); map.infoWindow.hide(); a = checkSearch(a); $(".searchError").remove(); switch (config.searchShortcut.toLowerCase()) { case "": searchAddress(a); _gaq.push(["_trackEvent", "Search", "AddressSearch", a]); break; default: searchArea(a, config.shortcutLookup[config.searchShortcut.toLowerCase()].layers, config.shortcutLookup[config.searchShortcut.toLowerCase()].fields); _gaq.push(["_trackEvent", "Search", "RegionSearch", config.searchShortcut.toLowerCase() + ":" + a]); break } } function checkSearch(a) { if (a.split(":").length > 1) { config.searchShortcut = a.split(":")[0] + ":"; a = a.split(":")[1]; setSearch($($('[rel-shortcut="' + config.searchShortcut.toLowerCase() + '"]')[0]).children()[0], config.searchShortcut) } else { var b = a.split(" "); for (var c = 0; c < b.length; c++) { if (config.numberKeywordLookup.hasOwnProperty(b[c].toLowerCase())) { config.searchShortcut = config.numberKeywordLookup[b[c].toLowerCase()]; setSearch($($('[rel-shortcut="' + config.numberKeywordLookup[b[c].toLowerCase()] + '"]')[0]).children()[0], config.searchShortcut); for (var d = 0; d < b.length; d++) { if (isNumber(b[d])) { a = b[d] } } } else if (b[c].length == 5 && isNumber(b[c]) && b.length < 2) { for (var d = 0; d < b.length; d++) { if (isNumber(b[d]) && b[d] != b[c]) { return a } } config.searchShortcut = "zip:"; setSearch($($('[rel-shortcut="zip:"]')[0]).children()[0], config.searchShortcut); a = b[c] } } } return a } function searchAddress(a) { a = encodeURIComponent($.trim(a.split(".").join(""))); $.jsonp({ url: config.geocodeUrl + "/" + a, timeout: 5e4, callbackParameter: "callback", error: function (a, b) { $("#SearchForm").after('<div class="alert searchError"><a class="close" data-dismiss="alert">×</a><p><strong>Sorry,</strong> we don\'t recognize that search.</p></div>') }, success: function (a, b) { showAddressResults(a) } }) } function searchArea(a, b, c) { var d = new esri.tasks.FindTask(config.shortcutSearchServiceUrl); var e = new esri.tasks.FindParameters; e.returnGeometry = true; e.layerIds = b; e.searchFields = c; e.searchText = a; d.execute(e, showAreaResults); $("#SearchDialog .alert").remove(); $("#AddressSearchText").val(a) } function showAddressResults(a) { if (a.Locations.length == 1) { showAddress(a.Locations[0]) } else if (a.Locations.length == 0) { $("#SearchForm").after('<div class="alert searchError"><a class="close" data-dismiss="alert">×</a><p><strong>Sorry,</strong> we don\'t recognize that search.</p></div>') } else { a.Locations.sort(function (a, b) { if (a.Address.Similarity > b.Address.Similarity) return -1; if (a.Address.Similarity < b.Address.Similarity) return 1; if (a.MatchType == 1) return -1; return 0 }); showAddress(a.Locations[0]) } } function showAddress(a) { $("#AddressSearchText").val(a.Address.StandardizedAddress); var b = new esri.geometry.Point(a.XCoord, a.YCoord, map.spatialReference); var c = new esri.tasks.AddressCandidate; c.location = b; c.address = a.Address.StandardizedAddress; var d; if (map.getLevel() != map.getNumLevels() - 3) { d = function () { var a = dojo.connect(map, "onZoomEnd", function () { map.infoWindow.show(b); $("#AddressSearchText").focus(); dojo.disconnect(a) }) } } else { d = function () { var a = dojo.connect(map, "onPanEnd", function () { map.infoWindow.show(b); $("#AddressSearchText").focus(); dojo.disconnect(a) }) } } idInfo(c); map.centerAndZoom(b, map.getNumLevels() - 3); d(); if (isPhone()) { $("#SearchDialog").dialog("close") } } function showAreaResults(a) { var b = new esri.symbol.SimpleMarkerSymbol(esri.symbol.SimpleMarkerSymbol.STYLE_SQUARE, 10, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([255, 0, 0]), 1), new dojo.Color([0, 255, 0, .25])); var c = new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_DASH, new dojo.Color([255, 0, 0]), 1); var d = new esri.symbol.SimpleFillSymbol(esri.symbol.SimpleFillSymbol.STYLE_SOLID, new esri.symbol.SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new dojo.Color([20, 155, 20]), 2), new dojo.Color([20, 155, 20, .2])); map.graphics.clear(); if (a.length > 0) { var e = a[0].feature; switch (e.geometry.type) { case "point": e.setSymbol(b); break; case "polyline": e.setSymbol(c); break; case "polygon": e.setSymbol(d); break } map.graphics.add(e); map.setExtent(e.geometry.getExtent().expand(1.5)); showInfo("Search Result", config.shortcutLookup[config.searchShortcut.toLowerCase()].resultLabel + $("#AddressSearchText").val(), e.geometry.getExtent().getCenter()); $(".actionsPane").hide(); var f = dojo.connect(map.infoWindow, "onHide", function () { map.graphics.clear(); dojo.disconnect(f); $(".actionsPane").show() }); if (isPhone()) { $("#SearchDialog").dialog("close") } } else { $("#SearchForm").after('<div class="alert searchError"><a class="close" data-dismiss="alert">×</a><p><strong>Sorry,</strong> we don\'t recognize that search.</p></div>') } } function setSearch(a, b) { if ($("#SearchMore").is(":hidden")) { searchToggle() } config.searchShortcut = b; $("#SearchMore li").removeClass("active"); $(a).parent().addClass("active"); $("#AddressSearchText").attr("placeholder", "Search for: " + $(a).text()) } function searchToggle() { $("#SearchMore").slideToggle(); $("#SearchMoreButton").html($("#SearchMoreButton").html() == '<i class="icon-plus-sign icon-large"></i>  Search For:' ? '<i class="icon-minus-sign icon-large"></i>  Search For:' : '<i class="icon-plus-sign icon-large"></i>  Search For:'); _gaq.push(["_trackEvent", "Search", "SearchToggle", $("#SearchMoreButton").html() == '<i class="icon-plus-sign icon-large"></i>  Search For:' ? "Close" : "Open"]) } function switcherInit(a) { $("#BaseMapSwitcher").mouseenter(switcherShow); $("#BaseMapSwitcher").mouseleave(switcherHide); dojo.connect(a, "onSelectionChange", changeBaseMapImage) } function addBaseMap(a, b) { var c = new esri.dijit.BasemapLayer({ url: a.url }); var d = new esri.dijit.Basemap({ layers: [c], title: a.title, thumbnailUrl: a.thumbnailUrl }); b.push(d) } function changeBaseMapImage() { var a = this.getSelected(); $(".baseMapText").html(a.title); $(".baseMapImage").css("background-image", "url(" + a.thumbnailUrl + ")"); _gaq.push(["_trackEvent", "BaseMap", "Change", a.title]) } function switcherShow() { $(".baseMapSwitcher").stop(true, true).switchClass("switcher-collapse", "switcher-expand", 300); _gaq.push(["_trackEvent", "BaseMap", "Switcher", "Show"]) } function switcherHide() { $(".baseMapSwitcher").stop(true, true).switchClass("switcher-expand", "switcher-collapse", 300); _gaq.push(["_trackEvent", "BaseMap", "Switcher", "Hide"]) } function createBasemapGallery() { var a = []; addBaseMap({ url: "http://gis.phila.gov/ArcGIS/rest/services/BaseMaps/GrayBase/MapServer", title: "Streets", thumbnailUrl: "/Map/Content/Images/Streets.jpg" }, a); addBaseMap({ url: "http://gis.phila.gov/ArcGIS/rest/services/BaseMaps/Hybrid/MapServer", title: "Hybrid", thumbnailUrl: "/Map/Content/Images/Hybrid.jpg" }, a); addBaseMap({ url: "http://gis.phila.gov/ArcGIS/rest/services/BaseMaps/Aerial2010/MapServer", title: "Aerial", thumbnailUrl: "/Map/Content/Images/Aerial.jpg" }, a); var b = new esri.dijit.BasemapGallery({ showArcGISBasemaps: false, basemaps: a, map: map }, "BaseMapGallery"); b.startup(); dojo.connect(b, "onError", function (a) { console.log(a) }); dojo.connect(window, "onresize", function () { resizeElements() }); switcherInit(b) } function initMapTopics() { $("#TopicsButton span").button("loading"); ago4o = new esri.arcgis.Portal(config.ago4oUrl); dojo.connect(ago4o, "onLoad", loadMapTopics) } function loadMapTopics() { ago4o.queryGroups({ q: "title: " + config.ago4oGroup + " AND owner:" + config.ago4oOwner }).then(function (a) { if (a.results.length > 0) { ago4oGroup = a.results[0]; ago4oGroup.queryItems({ q: " type: Web Map", num: 99 }).then(updateMapTopics) } }) } function updateMapTopics(a) { var b = a.results; for (var c = 0; c < b.length; c++) { $("#MapsList").append(buildTopicItem(b[c])); addTopicCategories(b[c]) } updateTopicCategories(); config.topicsLoaded = true; $("#TopicsDialog").dialog("open"); $("#TopicsButton span").button("reset"); if (config.deptFilter > "") { filterDepartment(config.deptFilter) } } function buildTopicItem(a) { return '<li class="span4 ' + arrayToString(a.tags) + '"><div class="thumbnail">' + '<img src="' + a.thumbnailUrl + '" alt="">' + '<div class="caption"><h5>' + a.title + "</h5>" + "<p>" + a.snippet + "</p>" + '<p><a id="' + a.id.toString().replace(/ /g, "") + '" data-loading-text="Loading..." class="btn btn-primary" title="View Map of ' + a.title + '" onclick="loadWebMap(' + "'" + a.id.toString().replace(/ /g, "") + "'" + ',this);">View Map</a> <a href="http://www.arcgis.com/home/item.html?id=' + a.id + '"target="_blank" title="View Details of ' + a.title + ' on ArcGIS Online" class="btn">View Details</a></p>' + "</div></div>" + "</li>" } function addTopicCategories(a) { for (var b = 0; b < a.tags.length; b++) { config.topicCategories.push(a.tags[b]) } } function updateTopicCategories() { config.topicCategories = eliminateDuplicates(config.topicCategories); config.topicCategories = config.topicCategories.sort(); for (var a = 0; a < config.topicCategories.length; a++) { if (config.topicCategories[a].substring(0, 4) != "DEPT") { $("#TopicsList").append('<li><a tip-data="tooltip-topic" title="Show Only: "  onclick="filterTopics(this);">' + config.topicCategories[a] + "</a></li>") } } $("[tip-data=tooltip-topic]").tooltip({ placement: "left" }) } function filterTopics(a) { var b = $(a).text().replace(/ /g, "_"); $("#TopicsList li").removeClass("active"); $(a).parent().addClass("active"); $("#DeptFilter").remove(); switch (b) { case "All": $("#MapsList li").hide(); $("#MapsList li").each(function (a) { $(this).delay(300 * a).show("drop", { direction: "right" }) }); break; default: $("#MapsList li").hide(); $("#MapsList li." + b).each(function (a) { $(this).delay(300 * a).show("drop", { direction: "right" }) }); break } } function filterDepartment(a) { $("#MapsList li").hide(); $("#MapsList li." + a).each(function (a) { $(this).delay(300 * a).show("drop", { direction: "right" }) }); $("#TopicsList").after('<p class="hero-unit" id="DeptFilter">Your Maps are being filtered based on the site you are visiting from.  To clear this filter, click any option above.</p>') } function initMapRegions() { $("#RegionsButton span").button("loading"); config.regionMapLayer = new esri.layers.ArcGISDynamicMapServiceLayer(config.regionMapService); map.addLayer(config.regionMapLayer, 1); config.regionListener = dojo.connect(map, "onLayerAdd", regionLayerLoaded) } function regionLayerLoaded(a) { if (a.url == config.regionMapService) { dojo.disconnect(config.regionListener); for (var b = 0; b < a.layerInfos.length; b++) { $("#RegionsList").append('<li><a input-data="region" region-data="' + a.layerInfos[b].id + '" onclick="showRegions(\'' + a.layerInfos[b].id + '\')" title="Show ' + a.layerInfos[b].name + '">  ' + a.layerInfos[b].name + "</a></li>") } } $("#RegionsDialog").dialog("open"); config.regionsLoaded = true; $("#RegionsButton span").button("reset") } function showRegions(a) { if ($("[region-data=" + a + "]").parent().hasClass("active")) { $("[input-data=region]").parent().removeClass("active"); getRegionLayer().setVisibleLayers([-1]); if (isPhone()) { $("#RegionsDialog").dialog("close") } } else { $("[region-data=" + a + "]").parent().addClass("active"); $("[input-data=region]").parent().removeClass("active"); $("[region-data=" + a + "]").parent().addClass("active"); getRegionLayer().setVisibleLayers([a]); if (isPhone()) { $("#RegionsDialog").dialog("close") } } } function getRegionLayer() { var a; for (var b = 0; b < map.layerIds.length; b++) { if (map.getLayer(map.layerIds[b]).url == config.regionMapService) { a = map.getLayer(map.layerIds[b]); break } } if (a == undefined) { map.addLayer(config.regionMapLayer, 1); a = config.regionLayer } return a } function loadWebMap(a, b) { if (b != undefined) { $("#" + b.id).button("loading") } mapDestroy(); var c; if (isPhone()) { c = new esri.dijit.PopupMobile(null, dojo.create("div")) } var d = esri.arcgis.utils.createMap(a, "map", { geometryServiceURL: config.geometryUrl, mapOptions: { infoWindow: c} }); d.addCallback(function (a) { map = a.map; $(".loadAlert").show(); registerLoading(); var b = a.itemInfo.itemData.operationalLayers; if (map.loaded) { initMap(b); if (config.regionMapLayer != undefined) { map.addLayer(config.regionMapLayer, 1) } } else { dojo.connect(map, "onLoad", function () { initMap(b); if (config.regionMapLayer != undefined) { map.addLayer(config.regionMapLayer, 1) } }) } }); d.addErrback(function (a) { console.log("Map creation failed: ", dojo.toJson(a)) }) } function mapDestroy() { map.destroy(); dijit.byId("BaseMapGallery").destroy(); $("#BaseMapSwitcher").remove(); $("#map").append('<div class="baseMapSwitcher switcher-collapse" id="BaseMapSwitcher"><div class="selectedBaseMap"><div class="baseMapImage esriBasemapGalleryThumbnail"></div><div class="baseMapText"></div></div><div id="BaseMapGallery" class="gallery"></div></div>'); if (dijit.byId("LegendContent")) { dijit.byId("LegendContent").destroy(); $("#LegendDialog").append('<div id="LegendContent"></div>') } } function initMap(a) { $("#TopicsDialog").dialog("close"); $(".caption .btn-primary").button("reset"); createBasemapGallery(); dijit.byId("BaseMapGallery").select("basemap_0"); var b = dojo.map(a, function (a, b) { return { layer: a.layerObject, title: a.title} }); var c = new esri.dijit.OverviewMap({ map: map, visible: false, attachTo: "bottom-right" }); c.startup(); if (b.length > 0) { var d = new esri.dijit.Legend({ map: map, layerInfos: b }, "LegendContent"); d.startup() } else { dojo.byId("LegendContent").innerHTML = "No operational layers" } dojo.connect(map, "onZoomEnd", checkScales); $(".scaleAlert").show(); if ($("#LegendButton").is(":hidden")) { $("#LegendButton").show("slide", { direction: "right" }, 500) } } function showInfo(a, b, c) { map.infoWindow.setTitle(a); map.infoWindow.setContent(b); map.infoWindow.show(c) } function idInfo(a) { var b = new esri.tasks.Query; b.geometry = new esri.geometry.Polygon(map.spatialReference); b.geometry.addRing(ringFromPoint(a.location, 3)); var c = dojo.map(map.graphicsLayerIds, function (a) { return map.getLayer(a).selectFeatures(b, esri.layers.FeatureLayer.SELECTION_NEW) }); map.infoWindow.setFeatures(c); map.infoWindow.setTitle("Address Search Result"); map.infoWindow.setContent(a.address) } function checkScales() { var a = esri.geometry.getScale(map); for (var b = 0; b < map.graphicsLayerIds.length; b++) { if (map.getLayer(map.graphicsLayerIds[b]).minScale < a) { $(".scaleAlert").show(); return null } } $(".scaleAlert").hide() } function ringFromPoint(a, b) { var c = new Array; c.push(a.offset(b * -1, b)); c.push(a.offset(b, b)); c.push(a.offset(b, b * -1)); c.push(a.offset(b * -1, b * -1)); c.push(a.offset(b * -1, b)); return c } function eliminateDuplicates(a) { var b, c = a.length, d = [], e = {}; for (b = 0; b < c; b++) { e[a[b]] = 0 } for (b in e) { d.push(b) } return d } function arrayToString(a) { var b = ""; for (i = 0; i < a.length; i++) { b = b + a[i].toString().replace(/ /g, "_") + " " } b = b.replace("DEPT:", ""); return b } function isNumber(a) { return !isNaN(parseFloat(a)) && isFinite(a) } function browserGrade() { if ($.browser.msie && $.browser.version.substr(0, 1) > 6) { var a = ["BorderRadius", "MozBorderRadius", "WebkitBorderRadius", "OBorderRadius", "KhtmlBorderRadius", "borderRadius"]; for (var b = 0; b < a.length; b++) { var c = a[b]; if (window.document.body.style[c] !== undefined) { return "A" } } return "B" } else if ($.browser.msie && $.browser.version.substr(0, 1) < 7) { return "F" } else { var a = ["BorderRadius", "MozBorderRadius", "WebkitBorderRadius", "OBorderRadius", "KhtmlBorderRadius", "borderRadius"]; for (var b = 0; b < a.length; b++) { var c = a[b]; if (window.document.body.style[c] !== undefined) { return "A" } } return "B" } } function compatCheck() { switch (browserGrade()) { case "F": alert("This browser is not supported, please upgrade or use a different browser."); break; case "B": $("#map").append('<div class="alert browserAlert"><button class="close" data-dismiss="alert">×</button>This application is optimized to take advantage of modern browsers.  Please upgrade your browser for a better experience.</div>'); break; case "A": break; default: break } } function getUrlVar(a) { var b = (new RegExp(a + "=([^&]*)", "i")).exec(window.location.search); return b && b[1] || "" } function isTouchDevice() { var a = document.createElement("div"); a.setAttribute("ontouchmove", "return;"); return typeof a.ontouchmove == "function" } function isTabletOrLess() { if ($(window).width() <= 1020) { return true } else { return false } } function isPhone() { if ($(window).width() <= 480) { return true } else { return false } } dojo.require("dijit.dijit"); dojo.require("esri.map"); dojo.require("esri.dijit.Popup"); dojo.require("esri.dijit.PopupMobile"); dojo.require("esri.dijit.BasemapGallery"); dojo.require("esri.dijit.OverviewMap"); dojo.require("esri.arcgis.Portal"); dojo.require("esri.arcgis.utils"); dojo.require("esri.dijit.Legend"); dojo.require("esri.tasks.locator"); dojo.require("esri.tasks.find"); var map; var ago4o; var ago4oGroup; var locator; var config = {}; var utilities = {}; config.ago4oUrl = "http://philadelphia.maps.arcgis.com/sharing/rest/"; config.ago4oGroup = "Phila.Gov topics"; config.ago4oOwner = "adam.conner@phila.gov"; config.geometryUrl = "http://gis.phila.gov/ArcGIS/rest/services/Geometry/GeometryServer"; config.geocodeUrl = "http://services.phila.gov/ULRS311/Data/Location2272"; config.geocodeFieldName = "SingleLine"; config.deptFilter = ""; config.topicCategories = []; config.topicsLoaded = false; config.regionsLoaded = false; config.regionMapService = "http://gis.phila.gov/ArcGIS/rest/services/PhilaGov/ServiceAreas/MapServer"; config.searchShortcut = ""; config.shortcutLookup = { "cd:": { layers: [1], fields: ["DIST_NUM"], resultLabel: "Council District: " }, "ppd:": { layers: [7], fields: ["DIST_NUM"], resultLabel: "Police District: " }, "zip:": { layers: [20], fields: ["CODE"], resultLabel: "Zip Code: " }, "fd:": { layers: [2], fields: ["FIRENG_ID"], resultLabel: "Fire District: " }, "ct:": { layers: [0], fields: ["TRACT"], resultLabel: "Census Tract: " }, "wd:": { layers: [10], fields: ["WARD_NUM"], resultLabel: "Political Ward: " }, "hsc:": { layers: [17], fields: ["NAME"], resultLabel: "High School Catchment: "} }; config.numberKeywordLookup = { council: "cd:", police: "ppd:", fire: "fd:", census: "ct:", ward: "wd:" }; config.shortcutSearchServiceUrl = "http://gis.phila.gov/ArcGIS/rest/services/PhilaGov/ServiceAreas/MapServer"; dojo.addOnLoad(mapLoad); var Storage = function () { var a = { expires: 30, getItem: function (a) { return $.cookie(a) }, setItem: function (a, b) { return $.cookie(a, b, { path: "/", expires: this.expires }) }, removeItem: function (a) { return $.cookie(a, null) } }; var b = a; try { if ("localStorage" in window && window["localStorage"] !== null) { b = window.localStorage } } catch (c) { } return function (a) { if (!a) { a = "" } return { get: function (c) { return b.getItem(a + "-" + c) }, set: function (c, d) { return b.setItem(a + "-" + c, d) }, remove: function (c) { return b.remoteItem(a + "-" + c) } } } } ()