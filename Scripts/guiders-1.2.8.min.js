var guiders = function (a) { var b = {}; b.version = "1.2.8"; b._defaultSettings = { attachTo: null, autoFocus: false, buttons: [{ name: "Close"}], buttonCustomHTML: "", classString: null, closeOnEscape: false, description: "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", highlight: null, isHashable: true, offset: { top: null, left: null }, onClose: null, onHide: null, onShow: null, overlay: false, position: 0, title: "Sample title goes here", width: 400, xButton: false }; b._htmlSkeleton = ["<div class='guider'>", "  <div class='guider_content'>", "    <h1 class='guider_title'></h1>", "    <div class='guider_close'></div>", "    <p class='guider_description'></p>", "    <div class='guider_buttons'>", "    </div>", "  </div>", "  <div class='guider_arrow'>", "  </div>", "</div>"].join(""); b._arrowSize = 42; b._backButtonTitle = "Back"; b._buttonElement = "<a></a>"; b._buttonAttributes = { href: "javascript:void(0);" }; b._closeButtonTitle = "Close"; b._currentGuiderID = null; b._guiders = {}; b._lastCreatedGuiderID = null; b._nextButtonTitle = "Next"; b._offsetNameMapping = { topLeft: 11, top: 12, topRight: 1, rightTop: 2, right: 3, rightBottom: 4, bottomRight: 5, bottom: 6, bottomLeft: 7, leftBottom: 8, left: 9, leftTop: 10 }; b._windowHeight = 0; b._addButtons = function (c) { var d = c.elem.find(".guider_buttons"); if (c.buttons === null || c.buttons.length === 0) { d.remove(); return } for (var e = c.buttons.length - 1; e >= 0; e--) { var f = c.buttons[e]; var g = a(b._buttonElement, a.extend({ "class": "guider_button btn btn-primary", html: f.name }, b._buttonAttributes, f.html || {})); if (typeof f.classString !== "undefined" && f.classString !== null) { g.addClass(f.classString) } d.append(g); var h = f.name.toLowerCase(); if (f.onclick) { g.bind("click", f.onclick) } else { switch (h) { case b._closeButtonTitle.toLowerCase(): g.bind("click", function () { b.hideAll(); if (c.onClose) { c.onClose(c, false) } }); break; case b._nextButtonTitle.toLowerCase(): g.bind("click", function () { !c.elem.data("locked") && b.next() }); break; case b._backButtonTitle.toLowerCase(): g.bind("click", function () { !c.elem.data("locked") && b.prev() }); break } } } if (c.buttonCustomHTML !== "") { var i = a(c.buttonCustomHTML); c.elem.find(".guider_buttons").append(i) } if (c.buttons.length === 0) { d.remove() } }; b._addXButton = function (c) { var d = c.elem.find(".guider_close"); var e = a("<div></div>", { "class": "x_button", role: "button" }); d.append(e); e.click(function () { b.hideAll(); if (c.onClose) { c.onClose(c, true) } }) }; b._wireEscape = function (c) { a(document).keydown(function (a) { if (a.keyCode == 27 || a.which == 27) { b.hideAll(); if (c.onClose) { c.onClose(c, true) } return false } }) }; b._unWireEscape = function (b) { a(document).unbind("keydown") }; b._attach = function (c) { if (typeof c !== "object") { return } var d = a(c.attachTo); var e = c.elem.innerHeight(); var f = c.elem.innerWidth(); if (c.position === 0 || d.length === 0) { c.elem.css("position", "fixed"); c.elem.css("top", (a(window).height() - e) / 3 + "px"); c.elem.css("left", (a(window).width() - f) / 2 + "px"); return } var g = d.offset(); var h = g.top; var i = g.left; var j = a("body").outerHeight(true) - a("body").outerHeight(false); h -= j; if (b._offsetNameMapping[c.position]) { c.position = b._offsetNameMapping[c.position] } var k = d.innerHeight(); var l = d.innerWidth(); var m = .9 * b._arrowSize; var n = { 1: [-m - e, l - f], 2: [0, m + l], 3: [k / 2 - e / 2, m + l], 4: [k - e, m + l], 5: [m + k, l - f], 6: [m + k, l / 2 - f / 2], 7: [m + k, 0], 8: [k - e, -f - m], 9: [k / 2 - e / 2, -f - m], 10: [0, -f - m], 11: [-m - e, 0], 12: [-m - e, l / 2 - f / 2] }; var o = n[c.position]; h += o[0]; i += o[1]; var p = "absolute"; if (d.css("position") == "fixed") { p = "fixed"; h -= a(window).scrollTop(); i -= a(window).scrollLeft() } if (c.offset.top !== null) { h += c.offset.top } if (c.offset.left !== null) { i += c.offset.left } return c.elem.css({ position: p, top: h, left: i }) }; b._guiderById = function (a) { if (typeof b._guiders[a] === "undefined") { throw "Cannot find guider with id " + a } return b._guiders[a] }; b._showOverlay = function () { a("#guider_overlay").fadeIn("fast", function () { if (this.style.removeAttribute) { this.style.removeAttribute("filter") } }) }; b._highlightElement = function (b) { a(b).addClass("guider_highlight") }; b._dehighlightElement = function (b) { a(b).removeClass("guider_highlight") }; b._hideOverlay = function () { a("#guider_overlay").fadeOut("fast") }; b._initializeOverlay = function () { if (a("#guider_overlay").length === 0) { a('<div id="guider_overlay"></div>').hide().appendTo("body") } }; b._styleArrow = function (c) { var d = c.position || 0; if (!d) { return } var e = a(c.elem.find(".guider_arrow")); var f = { 1: "guider_arrow_down", 2: "guider_arrow_left", 3: "guider_arrow_left", 4: "guider_arrow_left", 5: "guider_arrow_up", 6: "guider_arrow_up", 7: "guider_arrow_up", 8: "guider_arrow_right", 9: "guider_arrow_right", 10: "guider_arrow_right", 11: "guider_arrow_down", 12: "guider_arrow_down" }; e.addClass(f[d]); var g = c.elem.innerHeight(); var h = c.elem.innerWidth(); var i = b._arrowSize / 2; var j = { 1: ["right", i], 2: ["top", i], 3: ["top", g / 2 - i], 4: ["bottom", i], 5: ["right", i], 6: ["left", h / 2 - i], 7: ["left", i], 8: ["bottom", i], 9: ["top", g / 2 - i], 10: ["top", i], 11: ["left", i], 12: ["left", h / 2 - i] }; var d = j[c.position]; e.css(d[0], d[1] + "px") }; b._showIfHashed = function (a) { var c = "guider="; var d = window.location.hash.indexOf(c); if (d !== -1) { var e = window.location.hash.substr(d + c.length); if (a.id.toLowerCase() === e.toLowerCase()) { b.show(a.id) } } }; b.reposition = function () { var a = b._guiders[b._currentGuiderID]; b._attach(a) }; b.next = function () { var a = b._guiders[b._currentGuiderID]; if (typeof a === "undefined") { return } a.elem.data("locked", true); var c = a.next || null; if (c !== null && c !== "") { var d = b._guiderById(c); var e = d.overlay ? true : false; b.hideAll(e, true); if (a && a.highlight) { b._dehighlightElement(a.highlight) } b.show(c) } }; b.prev = function () { var a = b._guiders[b._currentGuiderID]; if (typeof a === "undefined") { return } if (a.prev === null) { return } var c = b._guiders[a.prev]; c.elem.data("locked", true); var d = c.id || null; if (d !== null && d !== "") { var e = b._guiderById(d); var f = e.overlay ? true : false; b.hideAll(f, true); if (c && c.highlight) { b._dehighlightElement(c.highlight) } b.show(d) } }; b.createGuider = function (c) { if (c === null || c === undefined) { c = {} } myGuider = a.extend({}, b._defaultSettings, c); myGuider.id = myGuider.id || String(Math.floor(Math.random() * 1e3)); var d = a(b._htmlSkeleton); myGuider.elem = d; if (typeof myGuider.classString !== "undefined" && myGuider.classString !== null) { myGuider.elem.addClass(myGuider.classString) } myGuider.elem.css("width", myGuider.width + "px"); var e = d.find(".guider_title"); e.html(myGuider.title); d.find(".guider_description").html(myGuider.description); b._addButtons(myGuider); if (myGuider.xButton) { b._addXButton(myGuider) } d.hide(); d.appendTo("body"); d.attr("id", myGuider.id); if (typeof myGuider.attachTo !== "undefined" && myGuider !== null) { b._attach(myGuider) && b._styleArrow(myGuider) } b._initializeOverlay(); b._guiders[myGuider.id] = myGuider; if (b._lastCreatedGuiderID != null) { myGuider.prev = b._lastCreatedGuiderID } b._lastCreatedGuiderID = myGuider.id; if (myGuider.isHashable) { b._showIfHashed(myGuider) } return b }; b.hideAll = function (c, d) { d = d || false; a(".guider:visible").each(function (c, e) { var f = b._guiderById(a(e).attr("id")); if (f.onHide) { f.onHide(f, d) } }); a(".guider").fadeOut("fast"); var e = b._guiders[b._currentGuiderID]; if (e && e.highlight) { b._dehighlightElement(e.highlight) } if (typeof c !== "undefined" && c === true) { } else { b._hideOverlay() } return b }; b.show = function (c) { if (!c && b._lastCreatedGuiderID) { c = b._lastCreatedGuiderID } var d = b._guiderById(c); if (d.overlay) { b._showOverlay(); if (d.highlight) { b._highlightElement(d.highlight) } } if (d.closeOnEscape) { b._wireEscape(d) } else { b._unWireEscape(d) } if (d.onShow) { d.onShow(d) } b._attach(d); d.elem.fadeIn("fast").data("locked", false); b._currentGuiderID = c; var e = b._windowHeight = a(window).height(); var f = a(window).scrollTop(); var g = d.elem.offset(); var h = d.elem.height(); var i = f + e < g.top + h; var j = g.top < f; if (d.autoFocus && (i || j)) { setTimeout(b.scrollToCurrent, 10) } a(d.elem).trigger("guiders.show"); return b }; b.scrollToCurrent = function () { var c = b._guiders[b._currentGuiderID]; if (typeof c === "undefined") { return } var d = b._windowHeight; var e = a(window).scrollTop(); var f = c.elem.offset(); var g = c.elem.height(); var h = Math.round(Math.max(f.top + g / 2 - d / 2, 0)); window.scrollTo(0, h) }; var c = undefined; a(window).resize(function () { if (typeof c !== "undefined") { clearTimeout(c) } c = setTimeout(function () { c = undefined; if (typeof b !== "undefined") { b.reposition() } }, 20) }); return b } .call(this, jQuery)